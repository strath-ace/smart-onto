{"status": 200, "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nECC memory - Wikipedia\n\n\n\n\n\n\n\n\t\n\t\n\n\t\n\n\n\n\tECC memory\n\n\t\n\t\n\t\tFrom Wikipedia, the free encyclopedia\n\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\tJump to navigation\n\t\tJump to search\n\t\tAuto-correcting computer data storage\n\n  \nECC DIMMs typically have nine memory chips on each side, one more than usually found on non-ECC DIMMs (some modules may have 5 or 18).[1]\n\n\n\nError-correcting code memory (ECC memory) is a type of computer data storage that can detect and correct the most-common kinds of internal data corruption. ECC memory is used in most computers where data corruption cannot be tolerated under any circumstances, such as for scientific or financial computing.\n\nTypically, ECC memory maintains a memory system immune to single-bit errors: the data that is read from each word is always the same as the data that had been written to it, even if one of the bits actually stored has been flipped to the wrong state.[2] Most non-ECC memory cannot detect errors, although some non-ECC memory with parity support allows detection but not correction.\n\n\nContents\n\n\n\t1 Problem background\n\t2 Solutions\n\t3 Implementations\n\t4 Cache\n\t5 Registered memory\n\t6 Advantages and disadvantages\n\t7 References\n\t8 External links\n\n\n\n\n\nProblem background[edit]\n\nElectrical or magnetic interference inside a computer system can cause a single bit of dynamic random-access memory (DRAM) to spontaneously flip to the opposite state. It was initially thought that this was mainly due to alpha particles emitted by contaminants in chip packaging material, but research has shown that the majority of one-off soft errors in DRAM chips occur as a result of background radiation, chiefly neutrons from cosmic ray secondaries, which may change the contents of one or more memory cells or interfere with the circuitry used to read or write to them.[3] Hence, the error rates increase rapidly with rising altitude; for example, compared to sea level, the rate of neutron flux is 3.5 times higher at 1.5\u00a0km and 300 times higher at 10\u201312\u00a0km (the cruising altitude of commercial airplanes).[4] As a result, systems operating at high altitudes require special provision for reliability.\n\nAs an example, the spacecraft Cassini\u2013Huygens, launched in 1997, contained two identical flight recorders, each with 2.5\u00a0gigabits of memory in the form of arrays of commercial DRAM chips.  Thanks to built-in EDAC functionality, spacecraft's engineering telemetry reported the number of (correctable) single-bit-per-word errors and (uncorrectable) double-bit-per-word errors.  During the first 2.5\u00a0years of flight, the spacecraft reported a nearly constant single-bit error rate of about 280\u00a0errors per day.  However, on November 6, 1997, during the first month in space, the number of errors increased by more than a factor of four for that single day. This was attributed to a solar particle event that had been detected by the satellite GOES 9.[5]\n\nThere was some concern that as DRAM density increases further, and thus the components on chips get smaller, while at the same time operating voltages continue to fall, DRAM chips will be affected by such radiation more frequently\u2014since lower-energy particles will be able to change a memory cell's state.[4] On the other hand, smaller cells make smaller targets, and moves to technologies such as SOI may make individual cells less susceptible and so counteract, or even reverse, this trend. Recent studies[6] show that single-event upsets due to cosmic radiation have been dropping dramatically with process geometry and previous concerns over increasing bit cell error rates are unfounded.\n\nWork published between 2007 and 2009 showed widely varying error rates with over 7 orders of magnitude difference, ranging from 10\u221210 error/bit\u00b7h (roughly one bit error per hour per gigabyte of memory) to 10\u221217 error/bit\u00b7h (roughly one bit error per millennium per gigabyte of memory).[6][7][8] A large-scale study based on Google's very large number of servers was presented at the SIGMETRICS/Performance\u201909 conference.[7] The actual error rate found was several orders of magnitude higher than the previous small-scale or laboratory studies, with between 25,000 (roughly 2.5\u00a0\u00d7\u00a010\u221211 error/bit\u00b7h) and 70,000 (roughly 7\u00a0\u00d7\u00a010\u221211 error/bit\u00b7h, or 5 bit errors per 8 gigabytes of RAM per hour) errors per billion device hours per megabit. More than 8% of DIMM memory modules were affected by errors per year.\n\nThe consequence of a memory error is system-dependent. In systems without ECC, an error can lead either to a crash or to corruption of data; in large-scale production sites, memory errors are one of the most-common hardware causes of machine crashes.[7] Memory errors can cause security vulnerabilities.[7] A memory error can have no consequences if it changes a bit which neither causes observable malfunctioning nor affects data used in calculations or saved. A 2010 simulation study showed that, for a web browser, only a small fraction of memory errors caused data corruption, although, as many memory errors are intermittent and correlated, the effects of memory errors were greater than would be expected for independent soft errors.[9]\n\nSome tests conclude that the isolation of DRAM memory cells can be circumvented by unintended side effects of specially crafted accesses to adjacent cells.  Thus, accessing data stored in DRAM causes memory cells to leak their charges and interact electrically, as a result of high cell density in modern memory, altering the content of nearby memory rows that actually were not addressed in the original memory access.  This effect is known as row hammer, and it has also been used in some privilege escalation computer security exploits.[10][11]\n\nAn example of a single-bit error that would be ignored by a system with no error-checking, would halt a machine with parity checking, or would be invisibly corrected by ECC: a single bit is stuck at 1 due to a faulty chip, or becomes changed to 1 due to background or cosmic radiation; a spreadsheet storing numbers in ASCII format is loaded, and the character \"8\" (decimal value 56 in the ASCII encoding) is stored in the byte that contains the stuck bit at its lowest bit position; then, a change is made to the spreadsheet and it is saved. As a result, the \"8\" (0011\u20091000 binary) has silently become a \"9\" (0011\u20091001).\n\n\nSolutions[edit]\n\nSeveral approaches have been developed to deal with unwanted bit-flips, including immunity-aware programming, RAM parity memory, and ECC memory.\n\nThis problem can be mitigated by using DRAM modules that include extra memory bits and memory controllers that exploit these bits. These extra bits are used to record parity or to use an error-correcting code (ECC). Parity allows the detection of all single-bit errors (actually, any odd number of wrong bits). The most-common error correcting code, a single-error correction and double-error detection (SECDED) Hamming code, allows a single-bit error to be corrected and (in the usual configuration, with an extra parity bit) double-bit errors to be detected. Chipkill ECC is a more effective version that also corrects for multiple bit errors, including the loss of an entire memory chip.\n\n\nImplementations[edit]\n\nSeymour Cray famously said \"parity is for farmers\" when asked why he left this out of the CDC 6600.[12] Later, he included parity in the CDC 7600, which caused pundits to remark that \"apparently a lot of farmers buy computers\". The original IBM PC and all PCs until the early 1990s used parity checking.[13] Later ones mostly did not. Many current microprocessor memory controllers, including almost all AMD 64-bit offerings, support ECC, but many motherboards and in particular those using low-end chipsets do not.[citation needed]\n\nAn ECC-capable memory controller can detect and correct errors of a single bit per 64-bit \"word\" (the unit of bus transfer), and detect (but not correct) errors of two bits per 64-bit word. The BIOS in some computers, when matched with operating systems such as some versions of Linux, macOS, and Windows,[citation needed] allows counting of detected and corrected memory errors, in part to help identify failing memory modules before the problem becomes catastrophic.\n\nSome DRAM chips include \"internal\" on-chip error correction circuits, which allow systems with non-ECC memory controllers to still gain most of the benefits of ECC memory.[14][15]  In some systems, a similar effect may be achieved by using EOS memory modules.\n\nError detection and correction (EDAC) depends on an expectation of the kinds of errors that occur. Implicitly, it is assumed that the failure of each bit in a word of memory is independent, resulting in improbability of two simultaneous errors. This used to be the case when memory chips were one-bit wide, what was typical in the first half of the 1980s; later developments moved many bits into the same chip. This weakness is addressed by various technologies, including IBM's Chipkill, Sun Microsystems' Extended ECC, Hewlett Packard's Chipspare, and Intel's Single Device Data Correction (SDDC).\n\nDRAM memory may provide increased protection against soft errors by relying on error correcting codes. Such error-correcting memory, known as ECC or EDAC-protected memory, is particularly desirable for high fault-tolerant applications, such as servers, as well as deep-space applications due to increased radiation. Some systems also \"scrub\" the memory, by periodically reading all addresses and writing back corrected versions if necessary to remove soft errors.\n\nInterleaving allows for distribution of the effect of a single cosmic ray, potentially upsetting multiple physically neighboring bits across multiple words by associating neighboring bits to different words. As long as a single event upset (SEU) does not exceed the error threshold (e.g., a single error) in any particular word between accesses, it can be corrected (e.g., by a single-bit error correcting code), and an effectively error-free memory system may be maintained.[16]\n\nError-correcting memory controllers traditionally use Hamming codes, although some use triple modular redundancy (TMR). The latter is preferred because its hardware is faster than that of Hamming error correction scheme.[16] Space satellite systems often use TMR,[17][18][19] although satellite RAM usually uses Hamming error correction.[20]\n\nMany early implementations of ECC memory mask correctable errors, acting \"as if\" the error never occurred, and only report uncorrectable errors.  Modern implementations log both correctable errors (CE) and uncorrectable errors (UE).  Some people proactively replace memory modules that exhibit high error rates, in order to reduce the likelihood of uncorrectable error events.[21]\n\nMany ECC memory systems use an \"external\" EDAC circuit between the CPU and the memory.  A few systems with ECC memory use both internal and external EDAC systems; the external EDAC system should be designed to correct certain errors that the internal EDAC system is unable to correct.[14]  Modern desktop and server CPUs integrate the EDAC circuit into the CPU,[22] especially with the shift toward CPU-integrated memory controllers, which are related to the NUMA architecture.\n\nAs of 2009, the most-common error-correction codes use Hamming or Hsiao codes that provide single-bit error correction and double-bit error detection (SEC-DED).  Other error-correction codes have been proposed for protecting memory\u00a0\u2013  double-bit error correcting and triple-bit error detecting (DEC-TED) codes, single-nibble error correcting and double-nibble error detecting (SNC-DND) codes, Reed\u2013Solomon error correction codes, etc.  However, in practice, multi-bit correction is usually implemented by interleaving multiple SEC-DED codes.[23][24]\n\nEarly research attempted to minimize the area and delay overheads of ECC circuits.  Hamming first demonstrated that SEC-DED codes were possible with one particular check matrix.  Hsiao showed that an alternative matrix with odd weight columns provides SEC-DED capability with less hardware area and shorter delay than traditional Hamming SEC-DED codes.  More recent research also attempts to minimize power in addition to minimizing area and delay.[25][26][27]\n\n\nCache[edit]\n\nMany processors use error-correction codes in the on-chip cache, including the Intel Itanium and Xeon[28] processors, the AMD Athlon, Opteron, all Zen-[29] and Zen+-based[30] processors (EPYC, EPYC Embedded, Ryzen and Ryzen Threadripper), and the DEC Alpha 21264.[23][31]\n\nAs of 2006[update], EDC/ECC and ECC/ECC are the two most-common cache error-protection techniques used in commercial microprocessors.  The EDC/ECC technique uses an error-detecting code (EDC) in the level 1 cache.  If an error is detected, data is recovered from ECC-protected level 2 cache.  The ECC/ECC technique uses an ECC-protected level 1 cache and an ECC-protected level 2 cache.[32] CPUs that use the EDC/ECC technique always write-through all STOREs to the level 2 cache, so that when an error is detected during a read from the level 1 data cache, a copy of that data can be recovered from the level 2 cache.\n\n\nRegistered memory[edit]\n\nMain article: Registered memory\n\n  \nTwo 8\u00a0GB DDR4-2133 ECC 1.2\u00a0V RDIMMs\n\n\n\nRegistered, or buffered, memory is not the same as ECC; the technologies perform different functions. It is usual for memory used in servers to be both registered, to allow many memory modules to be used without electrical problems, and ECC, for data integrity. Memory used in desktop computers is neither, for economy. However, unbuffered (not-registered) ECC memory is available,[33] and some non-server motherboards support ECC functionality of such modules when used with a CPU that supports ECC.[34] Registered memory does not work reliably in motherboards without buffering circuitry, and vice versa.\n\n\nAdvantages and disadvantages[edit]\n\nUltimately, there is a trade-off between protection against unusual loss of data, and a higher cost.\n\nECC protects against undetected memory data corruption, and is used in computers where such corruption is unacceptable, for example in some scientific and financial computing applications, or in file servers. ECC also reduces the number of crashes that are especially unacceptable in multi-user server applications and maximum-availability systems.  Most motherboards and processors for less critical application are not designed to support ECC so their prices can be kept lower.  Some ECC-enabled boards and processors are able to support unbuffered (unregistered) ECC, but will also work with non-ECC memory; system firmware enables ECC functionality if the ECC RAM is installed.\n\nECC memory usually involves a higher price when compared to non-ECC memory, due to additional hardware required for producing ECC memory modules, and due to lower production volumes of ECC memory and associated system hardware.  Motherboards, chipsets and processors that support ECC may also be more expensive.\n\nECC may lower memory performance by around 2\u20133 percent on some systems, depending on the application and implementation, due to the additional time needed for ECC memory controllers to perform error checking.[35] However, modern systems integrate ECC testing into the CPU, generating no additional delay to memory accesses as long as no errors are detected.[22][36][37]\n\n\nReferences[edit]\n\n\n\t^ Werner Fischer. \"RAM Revealed\". admin-magazine.com. Retrieved October 20, 2014.\n\n\t^ \"A survey of techniques for improving error-resilience of DRAM\", JSA, 2018\n\n\t^ Single Event Upset at Ground Level, Eugene Normand, Member, IEEE, Boeing Defense & Space Group, Seattle, WA 98124-2499\n\n\t^ a b \"A Survey of Techniques for Modeling and Improving Reliability of Computing Systems\", IEEE TPDS, 2015\n\n\t^ Gary M. Swift and Steven M. Guertin. \"In-Flight Observations of Multiple-Bit Upset in DRAMs\". Jet Propulsion Laboratory\n\n\t^ a b Borucki, \"Comparison of Accelerated DRAM Soft Error Rates Measured at Component and System Level\", 46th Annual International Reliability Physics Symposium, Phoenix, 2008, pp.\u00a0482\u2013487\n\n\t^ a b c d Schroeder, Bianca; Pinheiro, Eduardo; Weber, Wolf-Dietrich (2009). DRAM Errors in the Wild: A Large-Scale Field Study (PDF). SIGMETRICS/Performance. ACM. ISBN\u00a0978-1-60558-511-6. Lay summary \u2013 ZDNet.\n\n\n\t^ \"A Memory Soft Error Measurement on Production Systems\".\n\n\n\t^ Li, Huang; Shen, Chu (2010). \"\"A Realistic Evaluation of Memory Hardware Errors and Software System Susceptibility\". Usenix Annual Tech Conference 2010\" (PDF).\n\n\n\t^ Yoongu Kim; Ross Daly; Jeremie Kim; Chris Fallin; Ji Hye Lee; Donghyuk Lee; Chris Wilkerson; Konrad Lai; Onur Mutlu (2014-06-24). \"Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors\" (PDF). ece.cmu.edu. IEEE. Retrieved 2015-03-10.\n\n\n\t^ Dan Goodin (2015-03-10). \"Cutting-edge hack gives super user status by exploiting DRAM weakness\". Ars Technica. Retrieved 2015-03-10.\n\n\n\t^ \"CDC 6600\". Microsoft Research. Retrieved 2011-11-23.\n\n\n\t^ \"Parity Checking\". Pcguide.com. 2001-04-17. Retrieved 2011-11-23.\n\n\n\t^ a b \nA. H. Johnston.\n\"Space Radiation Effects in Advanced Flash Memories\" Archived 2016-03-04 at the Wayback Machine.\nNASA Electronic Parts and Packaging Program (NEPP).\n2001.\n\n\t^ \"ECC DRAM \u2013 Intelligent Memory\". intelligentmemory.com. Retrieved 2014-12-23.\n\n\n\t^ a b \"Using StrongArm SA-1110 in the On-Board Computer of Nanosatellite\". Tsinghua Space Center, Tsinghua University, Beijing. Archived from the original on 2011-10-02. Retrieved 2009-02-16.\n\n\n\t^ \"Actel engineers use triple-module redundancy in new rad-hard FPGA\". Military & Aerospace Electronics. Retrieved 2009-02-16.\n[permanent dead link]\n\n\t^ \"SEU Hardening of Field Programmable Gate Arrays (FPGAs) For Space Applications and Device Characterization\". Klabs.org. 2010-02-03. Archived from the original on 2011-11-25. Retrieved 2011-11-23.\n\n\n\t^ \"FPGAs in Space\". Techfocusmedia.net. Retrieved 2011-11-23.\n[permanent dead link]\n\n\t^ \"Commercial Microelectronics Technologies for Applications in the Satellite Radiation Environment\". Radhome.gsfc.nasa.gov. Retrieved 2011-11-23.\n\n\n\t^ \nDoug Thompson, Mauro Carvalho Chehab.\n\"EDAC - Error Detection And Correction\" Archived 2009-09-05 at the Wayback Machine.\n2005 - 2009.\n\"The 'edac' kernel module goal is to detect and report errors that occur\nwithin the computer system running under linux.\"\n\n\t^ a b \"AMD-762\u2122 System Controller Software/BIOS Design Guide, p. 179\" (PDF).\n\n\n\t^ a b Doe Hyun Yoon; Mattan Erez. \"Memory Mapped ECC: Low-Cost Error Protection for Last Level Caches\". 2009. p. 3\n\n\t^ Daniele Rossi; Nicola Timoncini; Michael Spica; Cecilia Metra.\n\"Error Correcting Code Analysis for Cache Memory High Reliability and Performance\" Archived 2015-02-03 at the Wayback Machine.\n\n\t^ Shalini Ghosh; Sugato Basu; and Nur A. Touba. \"Selecting Error Correcting Codes to Minimize Power in Memory Checker Circuits\" Archived 2015-02-03 at the Wayback Machine. p. 2 and p. 4.\n\n\t^ Chris Wilkerson; Alaa R. Alameldeen; Zeshan Chishti; Wei Wu; Dinesh Somasekhar; Shih-lien Lu. \"Reducing cache power with low-cost, multi-bit error-correcting codes\". doi: 10.1145/1816038.1815973.\n\n\t^ M. Y. Hsiao. \"A Class of Optimal Minimum Odd-weight-column SEC-DED Codes\". 1970.\n\n\t^ \nIntel Corporation.\n\"Intel Xeon Processor E7 Family: Reliability, Availability, and Serviceability\".\n2011.\np. 12.\n\n\t^ \"AMD Zen microarchitecture - Memory Hierarchy\". WikiChip. Retrieved 15 October 2018.\n\n\n\t^ \"AMD Zen+ microarchitecture - Memory Hierarchy\". WikiChip. Retrieved 15 October 2018.\n\n\n\t^ \nJangwoo Kim; Nikos Hardavellas; Ken Mai; Babak Falsafi; James C. Hoe.\n\"Multi-bit Error Tolerant Caches Using Two-Dimensional Error Coding\".\n2007.\np. 2.\n\n\t^ \nNathan N. Sadler and Daniel J. Sorin.\n\"Choosing an Error Protection Scheme for a Microprocessor\u2019s L1 Data Cache\".\n2006.\np. 1.\n\n\t^ \"Typical unbuffered ECC RAM module: Crucial CT25672BA1067\".\n\n\n\t^ Specification of desktop motherboard that supports both ECC and non-ECC unbuffered RAM with compatible CPUs\n\n\t^ \"Discussion of ECC on pcguide\". Pcguide.com. 2001-04-17. Retrieved 2011-11-23.\n\n\n\t^ Benchmark of AMD-762/Athlon platform with and without ECC Archived 2013-06-15 at the Wayback Machine\n\n\t^ \"ECCploit: ECC Memory Vulnerable to Rowhammer Attacks After All\". Systems and Network Security Group at VU Amsterdam. Retrieved 2018-11-22.\n\n\n\n\n\nExternal links[edit]\n\n\tSoftECC: A System for Software Memory Integrity Checking\n\tA Tunable, Software-based DRAM Error Detection and Correction Library for HPC\n\tDetection and Correction of Silent Data Corruption for Large-Scale High-Performance Computing\n\tSingle-Bit Errors: A Memory Module Supplier\u2019s perspective on cause, impact and detection\n\tIntel Xeon Processor E3 - 1200 Product Family Memory Configuration Guide\n\n\n\t\tv\n\tt\n\te\n\n\nPrimary computer data storage technologies\n\n\tVolatile memory\t\n\tCurrent\t\n\tDRAM\n\te.g., DDR SDRAM\n\n\n\tSRAM\n\n\n\n\n\tFuture\t\n\tZ-RAM\n\n\n\n\n\tHistorical\t\n\tDelay line memory\n\tSelectron tube\n\tWilliams tube\n\n\n\n\n\n\n\n\tNon-volatile memory\t\n\tCurrent\t\n\t3D XPoint\n\tEAROM\n\tEEPROM\n\tEPROM\n\tFlash memory\n\tPROM\n\tROM\n\n\n\n\n\tFuture\t\n\tFeRAM\n\tMRAM\n\tNRAM\n\tPRAM\n\tRRAM\n\tSONOS\n\n\n\n\n\tHistorical\t\n\tBubble memory\n\tDrum memory\n\tMagnetic-core memory\n\tTwistor memory\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\tRetrieved from \"https://en.wikipedia.org/w/index.php?title=ECC_memory&oldid=916515533\"\n\n\t\t\n\t\tCategories: \tComputer memory\n\tFault-tolerant computer systems\n\n\nHidden categories: \tWebarchive template wayback links\n\tAll articles with dead external links\n\tArticles with dead external links from July 2019\n\tArticles with permanently dead external links\n\tArticles with dead external links from September 2017\n\tArticles with short description\n\tAll articles with unsourced statements\n\tArticles with unsourced statements from November 2013\n\tArticles with unsourced statements from August 2012\n\tArticles containing potentially dated statements from 2006\n\tAll articles containing potentially dated statements\n\n\n\n\n\t\t\n\n\t\t\n\t\n\n\n\n\n\t\n\n\n\n\n\n\t\t\n\t\t\tNavigation menu\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tPersonal tools\n\n\t\t\t\t\t\t\tNot logged in\n\tTalk\n\tContributions\n\tCreate account\n\tLog in\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tNamespaces\n\n\t\t\t\t\t\t\tArticle\n\tTalk\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tVariants\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tViews\n\n\t\t\t\t\t\t\tRead\n\tEdit\n\tView history\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tMore\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\n\n\t\t\t\n\n\t\t\t\n\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\tNavigation\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tMain page\n\tContents\n\tFeatured content\n\tCurrent events\n\tRandom article\n\tDonate to Wikipedia\n\tWikipedia store\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tInteraction\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tHelp\n\tAbout Wikipedia\n\tCommunity portal\n\tRecent changes\n\tContact page\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tTools\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tWhat links here\n\tRelated changes\n\tUpload file\n\tSpecial pages\n\tPermanent link\n\tPage information\n\tWikidata item\n\tCite this page\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tPrint/export\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tCreate a book\n\tDownload as PDF\n\tPrintable version\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tLanguages\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\u0627\u0644\u0639\u0631\u0628\u064a\u0629\n\t\u010ce\u0161tina\n\tEesti\n\tEspa\u00f1ol\n\t\u0641\u0627\u0631\u0633\u06cc\n\tFran\u00e7ais\n\t\ud55c\uad6d\uc5b4\n\tItaliano\n\tNederlands\n\t\u65e5\u672c\u8a9e\n\tNorsk\n\tPolski\n\tRom\u00e2n\u0103\n\t\u0420\u0443\u0441\u0441\u043a\u0438\u0439\n\t\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n\t\u4e2d\u6587\n\n\n\t\t\t\tEdit links\n\t\t\t\n\n\t\t\n\n\t\t\t\t\n\n\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t\t This page was last edited on 19 September 2019, at 08:38\u00a0(UTC).\n\tText is available under the Creative Commons Attribution-ShareAlike License;\nadditional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n\n\t\t\t\t\t\t\tPrivacy policy\n\tAbout Wikipedia\n\tDisclaimers\n\tContact Wikipedia\n\tDevelopers\n\tCookie statement\n\tMobile view\n\n\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\n\n\t\t\n\n\t\t\n\n\n\n\n", "metadata": {"Content-Encoding": "UTF-8", "Content-Language": "en", "Content-Type": "text/html; charset=UTF-8", "ResourceLoaderDynamicStyles": "", "X-Parsed-By": ["org.apache.tika.parser.DefaultParser", "org.apache.tika.parser.html.HtmlParser"], "X-TIKA:parse_time_millis": "7", "dc:title": "ECC memory - Wikipedia", "generator": "MediaWiki 1.34.0-wmf.23", "og:image": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Micron_PC2700_DDR_ECC_REG.JPG/1200px-Micron_PC2700_DDR_ECC_REG.JPG", "referrer": ["origin", "origin-when-crossorigin", "origin-when-cross-origin"], "resourceName": "https-en-wikipedia-org-wiki-ecc_memory", "title": "ECC memory - Wikipedia"}}
{"status": 200, "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nField-programmable gate array - Wikipedia\n\n\n\n\n\n\n\n\t\n\t\n\n\t\n\n\n\n\tField-programmable gate array\n\n\t\n\t\n\t\tFrom Wikipedia, the free encyclopedia\n\n\t\t\u00a0\u00a0(Redirected from FPGA)\n\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\tJump to navigation\n\t\tJump to search\n\t\t\n\n\n\"FPGA\" redirects here. It is not to be confused with Flip-chip pin grid array.\n\n  \nA Stratix IV FPGA from Altera\n\n\n\nA field-programmable gate array (FPGA) is an integrated circuit designed to be configured by a customer or a designer after manufacturing\u00a0\u2013 hence the term \"field-programmable\"[1]. The FPGA configuration is generally specified using a hardware description language (HDL), similar to that used for an Application-Specific Integrated Circuit (ASIC). Circuit diagrams were previously used to specify the configuration, but this is increasingly rare due to the advent of electronic design automation tools.\n\n\n  \nA Spartan FPGA from Xilinx\n\n\n\nFPGAs contain an array of programmable logic blocks, and a hierarchy of \"reconfigurable interconnects\" that allow the blocks to be \"wired together\", like many logic gates that can be inter-wired in different configurations. Logic blocks can be configured to perform complex combinational functions, or merely simple logic gates like AND and XOR. In most FPGAs, logic blocks also include memory elements, which may be simple flip-flops or more complete blocks of memory.[2] Many FPGAs can be reprogrammed to implement different logic functions,[3] allowing flexible reconfigurable computing as performed in computer software.\n\n\nContents\n\n\n\t1 Technical design\n\t2 History\n\t2.1 Integration\n\t2.2 Soft Core\n\t2.3 Timelines\n\t2.3.1 Gates\n\t2.3.2 Market size\n\t2.3.3 Design starts\n\n\n\n\n\n\n\t3 Comparisons\n\t3.1 To ASICs\n\t3.1.1 Trends\n\n\n\n\t3.2 Complex Programmable Logic Devices (CPLD)\n\t3.3 Security considerations\n\n\n\n\t4 Applications\n\t4.1 Common applications\n\n\n\n\t5 Architecture\n\t5.1 Logic blocks\n\t5.2 Hard blocks\n\t5.3 Clocking\n\t5.4 3D architectures\n\n\n\n\t6 Design and programming\n\t7 Basic process technology types\n\t8 Major manufacturers\n\t9 See also\n\t10 Notes\n\t11 References\n\t12 Further reading\n\t13 External links\n\n\n\n\n\nTechnical design[edit]\n\nContemporary field-programmable gate arrays (FPGAs) have large resources of logic gates and RAM blocks to implement complex digital computations.[3] As FPGA designs employ very fast I/O rates and bidirectional data buses, it becomes a challenge to verify correct timing of valid data within setup time and hold time.\n\nFloor planning enables resource allocation within FPGAs to meet these time constraints. FPGAs can be used to implement any logical function that an ASIC can perform. The ability to update the functionality after shipping, partial re-configuration of a portion of the design[4] and the low non-recurring engineering costs relative to an ASIC design (notwithstanding the generally higher unit cost), offer advantages for many applications.[2]\n\nSome FPGAs have analog features in addition to digital functions. The most common analog feature is a programmable slew rate on each output pin, allowing the engineer to set low rates on lightly loaded pins that would otherwise ring or couple unacceptably, and to set higher rates on heavily loaded pins on high-speed channels that would otherwise run too slowly.[5][6] Also common are quartz-crystal oscillators, on-chip resistance-capacitance oscillators, and phase-locked loops with embedded voltage-controlled oscillators used for clock generation and management and for high-speed serializer-deserializer (SERDES) transmit clocks and receiver clock recovery. Fairly common are differential comparators on input pins designed to be connected to differential signaling channels. A few \"mixed signal FPGAs\" have integrated peripheral analog-to-digital converters (ADCs) and digital-to-analog converters (DACs) with analog signal conditioning blocks allowing them to operate as a system-on-a-chip (SoC).[7] Such devices blur the line between an FPGA, which carries digital ones and zeros on its internal programmable interconnect fabric, and field-programmable analog array (FPAA), which carries analog values on its internal programmable interconnect fabric.\n\n\nHistory[edit]\n\nThe FPGA industry sprouted from programmable read-only memory (PROM) and programmable logic devices (PLDs). PROMs and PLDs both had the option of being programmed in batches in a factory or in the field (field-programmable). However, programmable logic was hard-wired between logic gates.[8]\n\nAltera was founded in 1983 and delivered the industry's first reprogrammable logic device in 1984 \u2013 the EP300 \u2013 which featured a quartz window in the package that allowed users to shine an ultra-violet lamp on the die to erase the EPROM cells that held the device configuration.[9] In December 2015, Intel acquired Altera.\n\nXilinx co-founders Ross Freeman and Bernard Vonderschmitt invented the first commercially viable field-programmable gate array in 1985\u00a0\u2013 the XC2064.[10] The XC2064 had programmable gates and programmable interconnects between gates, the beginnings of a new technology and market.[11] The XC2064 had 64 configurable logic blocks (CLBs), with two three-input lookup tables (LUTs).[12] More than 20 years later, Freeman was entered into the National Inventors Hall of Fame for his invention.[13][14]\n\nIn 1987, the Naval Surface Warfare Center funded an experiment proposed by Steve Casselman to develop a computer that would implement 600,000 reprogrammable gates. Casselman was successful and a patent related to the system was issued in 1992.[8]\n\nAltera and Xilinx continued unchallenged and quickly grew from 1985 to the mid-1990s, when competitors sprouted up, eroding significant market share. By 1993, Actel (now Microsemi) was serving about 18 percent of the market.[11] By 2013, Altera (31 percent), Actel (10 percent) and Xilinx (36 percent) together represented approximately 77 percent of the FPGA market.[15]\n\nThe 1990s were a period of rapid growth for FPGAs, both in circuit sophistication and the volume of production. In the early 1990s, FPGAs were primarily used in telecommunications and networking.  By the end of the decade, FPGAs found their way into consumer, automotive, and industrial applications.[16]\n\nCompanies like Microsoft have started to use FPGAs to accelerate high-performance, computationally intensive systems (like the data centers that operate their Bing search engine), due to the performance per watt advantage FPGAs deliver.[17] Microsoft began using FPGAs to accelerate Bing in 2014, and in 2018 began deploying FPGAs across other data center workloads for their Azure cloud computing platform.[18]\n\n\nIntegration[edit]\n\n\t\n\tThis section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.\nFind sources:\u00a0\"Field-programmable gate array\"\u00a0\u2013\u00a0news\u00a0\u00b7 newspapers\u00a0\u00b7 books\u00a0\u00b7 scholar\u00a0\u00b7 JSTOR  (June 2017) (Learn how and when to remove this template message)\n\n\n\nIn 2012 the coarse-grained architectural approach was taken a step further by combining the logic blocks and interconnects of traditional FPGAs with embedded microprocessors and related peripherals to form a complete \"system on a programmable chip\". This work mirrors the architecture created by Ron Perlof and Hana Potash of Burroughs Advanced Systems Group in 1982 which combined a reconfigurable CPU architecture on a single chip called the SB24.[citation needed] \n\nExamples of such hybrid technologies can be found in the Xilinx Zynq-7000 All Programmable SoC,[19] which includes a 1.0\u00a0GHz dual-core ARM Cortex-A9 MPCore processor embedded within the FPGA's logic fabric[20] or in the Altera Arria V FPGA, which includes an 800\u00a0MHz dual-core ARM Cortex-A9 MPCore. The Atmel FPSLIC is another such device, which uses an AVR processor in combination with Atmel's programmable logic architecture. The Microsemi SmartFusion devices incorporate an ARM Cortex-M3 hard processor core (with up to 512\u00a0kB of flash and 64\u00a0kB of RAM) and analog peripherals such as a multi-channel analog-to-digital converters and digital-to-analog converters to their flash memory-based FPGA fabric.\n\n\n  \nA Xilinx Zynq-7000 All Programmable System on a Chip.\n\n\n\nSoft Core[edit]\n\nAn alternate approach to using hard-macro processors is to make use of soft processor IP cores that are implemented within the FPGA logic. Nios II, MicroBlaze and Mico32 are examples of popular softcore processors. Many modern FPGAs are programmed at \"run time\", which has led to the idea of reconfigurable computing or reconfigurable systems\u00a0\u2013 CPUs that reconfigure themselves to suit the task at hand. Additionally, new, non-FPGA architectures are beginning to emerge. Software-configurable microprocessors such as the Stretch S5000 adopt a hybrid approach by providing an array of processor cores and FPGA-like programmable cores on the same chip.\n\n\nTimelines[edit]\n\nGates[edit]\n\n\t1987: 9,000 gates, Xilinx[11]\n\t1992: 600,000, Naval Surface Warfare Department[8]\n\tEarly 2000s: Millions[16]\n\t2013: 50 Million, Xilinx[21]\n\n\nMarket size[edit]\n\n\t1985: First commercial FPGA\u00a0: Xilinx XC2064[10][11]\n\t1987: $14 million[11]\n\t\u22481993: >$385 million[11]\n\t2005: $1.9 billion[22]\n\t2010 estimates: $2.75 billion[22]\n\t2013: $5.4 billion[23]\n\t2020 estimate: $9.8 billion[23]\n\n\nDesign starts[edit]\n\nA design start is a new custom design for implementation on an FPGA.\n\n\n\t2005: 80,000[24]\n\t2008: 90,000[25]\n\n\nComparisons[edit]\n\nTo ASICs[edit]\n\nHistorically, FPGAs have been slower, less energy efficient and generally achieved less functionality than their fixed ASIC counterparts. An older study[when?] showed that designs implemented on FPGAs need on average 40 times as much area, draw 12 times as much dynamic power, and run at one third the speed of corresponding ASIC implementations.[citation needed] \n\nMore recently, FPGAs such as the Xilinx Virtex-7 or the Altera Stratix 5 have come to rival corresponding ASIC and ASSP (\"Application-specific standard part\", such as a standalone USB interface chip[26]) solutions by providing significantly reduced power usage, increased speed, lower materials cost, minimal implementation real-estate, and increased possibilities for re-configuration 'on-the-fly'. A design that included 6 to 10 ASICs can now be achieved using only one FPGA.[27]\n\nAdvantages of FPGAs include the ability to re-program when already deployed (i.e. \"in the field\") to fix bugs, and often include shorter time to market and lower non-recurring engineering costs. Vendors can also take a middle road via FPGA prototyping: developing their prototype hardware on FPGAs, but manufacture their final version as an ASIC so that it can no longer be modified after the design has been committed.\n\n\nTrends[edit]\n\n\t\n\tThis article needs to be updated. In particular: It relies on a report from February 2009, nearly 10 years ago; in which many changes have occurred. Please update this section to reflect recent events or newly available information.  (December 2018)\n\n\n\nXilinx claimed that several market and technology dynamics are changing the ASIC/FPGA paradigm as of February 2009:[28]\n\n\n\tIntegrated circuit development costs were rising aggressively[citation needed]\n\tASIC complexity has lengthened development time\n\tR&D resources and headcount were decreasing[why?]\n\tRevenue losses for slow time-to-market were increasing[why?]\n\tFinancial constraints in a poor economy were driving low-cost technologies.[needs update]\n\n\nThese trends make FPGAs a better alternative than ASICs for a larger number of higher-volume applications than they have been historically used for, to which the company attributes the growing number of FPGA design starts (see \u00a7\u00a0History).[28]\n\nSome FPGAs have the capability of partial re-configuration that lets one portion of the device be re-programmed while other portions continue running.[29][30]\n\n\nComplex Programmable Logic Devices (CPLD)[edit]\n\nThe primary differences between complex programmable logic devices (CPLDs) and FPGAs are architectural. A CPLD has a comparatively restrictive structure consisting of one or more programmable sum-of-products logic arrays feeding a relatively small number of clocked registers. As a result, CPLDs are less flexible, but have the advantage of more predictable timing delays and a higher logic-to-interconnect ratio.[citation needed]  FPGA architectures, on the other hand, are dominated by interconnect. This makes them far more flexible (in terms of the range of designs that are practical for implementation on them) but also far more complex to design for, or at least requiring more complex electronic design automation (EDA) software.\n\nIn practice, the distinction between FPGAs and CPLDs is often one of size as FPGAs are usually much larger in terms of resources than CPLDs.  Typically only FPGAs contain more complex embedded functions such as adders, multipliers, memory, and serializer/deserializers.  Another common distinction is that CPLDs contain embedded flash memory to store their configuration while FPGAs usually require external non-volatile memory (but not always).\n\nWhen a design requires simple instant-on (logic is already configured at power-up)  CPLDs are generally preferred. For most other applications FPGAs are generally preferred.  Sometimes both CPLDs and FPGAs are used in a single system design.  In those designs, CPLDs generally perform glue logic functions, and are responsible for \u201cbooting\u201d the FPGA as well as controlling reset and boot sequence of the complete circuit board. Therefore, depending on the application it may be judicious to use both FPGAs and CPLDs in a single design.[31]\n\n\nSecurity considerations[edit]\n\nFPGAs have both advantages and disadvantages as compared to ASICs or secure microprocessors, concerning hardware security.  FPGAs' flexibility makes malicious modifications during fabrication a lower risk.[32]  Previously, for many FPGAs, the design bitstream was exposed while the FPGA loads it from external memory (typically on every power-on). All major FPGA vendors now offer a spectrum of security solutions to designers such as bitstream encryption and authentication. For example, Altera and Xilinx offer AES encryption (up to 256-bit) for bitstreams stored in an external flash memory.\n\nFPGAs that store their configuration internally in nonvolatile flash memory, such as Microsemi's ProAsic 3 or Lattice's XP2 programmable devices, do not expose the bitstream and do not need encryption. In addition, flash memory for a lookup table provides single event upset protection for space applications.[clarification needed] Customers wanting a higher guarantee of tamper resistance can use write-once, antifuse FPGAs from vendors such as Microsemi.\n\nWith its Stratix 10 FPGAs and SoCs, Altera introduced a Secure Device Manager and physically uncloneable functions to provide high levels of protection against physical attacks.[33]\n\nIn 2012 researchers Sergei Skorobogatov and Christopher Woods demonstrated that FPGAs can be vulnerable to hostile intent.  They discovered a critical backdoor vulnerability had been manufactured in silicon as part of the Actel/Microsemi ProAsic 3 making it vulnerable on many levels such as reprogramming crypto and access keys, accessing unencrypted bitstream, modifying low-level silicon features, and extracting configuration data.[34]\n\n\nApplications[edit]\n\nSee also: Hardware acceleration\n\nAn FPGA can be used to solve any problem which is computable. This is trivially proven by the fact that FPGAs can be used to implement a soft microprocessor, such as the Xilinx MicroBlaze or Altera Nios II. Their advantage lies in that they are significantly faster for some applications because of their parallel nature and optimality in terms of the number of gates used for certain processes.[35]\n\nFPGAs originally began as competitors to CPLDs to implement glue logic for printed circuit boards. As their size, capabilities, and speed increased, FPGAs took over additional functions to the point where some are now marketed as full systems on chips (SoCs). Particularly with the introduction of dedicated multipliers into FPGA architectures in the late 1990s, applications which had traditionally been the sole reserve of digital signal processor hardware (DSPs) began to incorporate FPGAs instead.[36][37]\n\nAnother trend in the use of FPGAs is hardware acceleration, where one can use the FPGA to accelerate certain parts of an algorithm and share part of the computation between the FPGA and a generic processor.[3] The search engine Bing is noted for adopting FPGA acceleration for its search algorithm in 2014.[38]  As of 2018[update], FPGAs are seeing increased use as AI accelerators including Microsoft's so-termed \"Project Catapult\"[18] and for accelerating artificial neural networks for machine learning applications.\n\nTraditionally,[when?] FPGAs have been reserved for specific vertical applications where the volume of production is small.  For these low-volume applications, the premium that companies pay in hardware cost per unit for a programmable chip is more affordable than the development resources spent on creating an ASIC.  As of 2017[update], new cost and performance dynamics have broadened the range of viable applications.\n\n\nCommon applications[edit]\n\nThis is a dynamic list and may never be able to satisfy particular standards for completeness. You can help by expanding it with reliably sourced entries.\n\n\tAerospace and Defense\n\tAvionics/DO-254\n\tCommunications\n\tMissiles & Munitions\n\tSecure Solutions\n\tSpace (i.e. with radiation hardening[39])\n\n\n\tAudio\n\tConnectivity Solutions\n\tDigital-to-analog converter\n\tPortable Electronics\n\tSoftware-Defined Radio\n\tDigital Signal Processing (DSP)\n\tSpeech Recognition\n\n\n\tAutomotive\n\tHigh Resolution Video\n\tImage Processing\n\tVehicle Networking and Connectivity\n\tAutomotive Infotainment\n\n\n\tBioinformatics\n\tBroadcast\n\tColor Grading\n\tReal-Time Video Engine\n\tEdgeQAM\n\tEncoders\n\tDisplays\n\tSwitches and Routers\n\n\n\tConsumer Electronics\n\tDigital Displays\n\tDigital Cameras\n\tMulti-function Printers\n\tPortable Electronics\n\tSet-top Boxes\n\tFlash Cartridges\n\n\n\tData Center\n\tServers\n\tSecurity\n\tHardware security module[40]\n\tRouters\n\tSwitches\n\tGateways\n\tLoad Balancing\n\n\n\tHigh Performance Computing\n\tServers\n\tSuper Computers\n\tSIGINT Systems\n\tHigh-end RADARs\n\tHigh-end Beam Forming Systems\n\tData Mining Systems\n\n\n\tIndustrial\n\tIndustrial Imaging\n\tIndustrial Networking\n\tMotor Control\n\n\n\tIntegrated Circuit Design\n\tASIC Prototyping\n\tComputer Hardware Emulation\n\n\n\tFinancial\n\tCrypto mining\n\tHigh-frequency trading\n\n\n\tMedical\n\tUltrasound\n\tCT Scan\n\tMRI\n\tX-ray\n\tPET\n\tSurgical Systems\n\n\n\tScientific Instruments\n\tLock-in amplifiers\n\tBoxcar averagers\n\tPhase-locked loops\n\tRadio Astronomy\n\n\n\tSecurity\n\tIndustrial Imaging\n\tSecure Solutions\n\tHardware security module[40]\n\tImage Processing\n\n\n\tVideo & Image Processing\n\tHigh Resolution Video\n\tVideo Over IP Gateway\n\tDigital Displays\n\tIndustrial Imaging\n\tComputer Vision\n\n\n\tWired Communications\n\tOptical Transport Networks\n\tNetwork Processing\n\tConnectivity Interfaces\n\n\n\tWireless Communications\n\tBaseband\n\tConnectivity Interfaces\n\tMobile Backhaul\n\tRadio\n\n\n\n\n\n\nArchitecture[edit]\n\nLogic blocks[edit]\n\nMain article: Logic block\n\n  \nSimplified example illustration of a logic cell (LUT\u00a0\u2013 Lookup table, FA\u00a0\u2013 Full adder, DFF\u00a0\u2013 D-type flip-flop)\n\n\n\nThe most common FPGA architecture consists of an array of logic blocks,[note 1] I/O pads, and routing channels.[2] Generally, all the routing channels have the same width (number of wires). Multiple I/O pads may fit into the height of one row or the width of one column in the array.\n\nAn application circuit must be mapped into an FPGA with adequate resources.  While the number of CLBs/LABs and I/Os required is easily determined from the design, the number of routing tracks needed may vary considerably even among designs with the same amount of logic.[note 2]\n\nFor example, a crossbar switch requires much more routing than a systolic array with the same gate count.  Since unused routing tracks increase the cost (and decrease the performance) of the part without providing any benefit, FPGA manufacturers try to provide just enough tracks so that most designs that will fit in terms of lookup tables (LUTs) and I/Os can be routed.[note 2]  This is determined by estimates such as those derived from Rent's rule or by experiments with existing designs.  As of 2018[update], network-on-chip architectures for routing and interconnection are being developed.\n\nIn general, a logic block consists of a few logical cells (called ALM, LE, slice etc.). A typical cell consists of a 4-input LUT[timeframe?], a full adder (FA) and a D-type flip-flop, as shown above. The LUTs are in this figure split into two 3-input LUTs. In normal mode those are combined into a 4-input LUT through the left multiplexer (mux). In arithmetic mode, their outputs are fed to the adder. The selection of mode is programmed into the middle MUX. The output can be either synchronous or asynchronous, depending on the programming of the mux to the right, in the figure example. In practice, entire or parts of the adder are stored as functions into the LUTs in order to save space.[41][42][43]\n\n\nHard blocks[edit]\n\nModern FPGA families expand upon the above capabilities to include higher level functionality fixed in silicon. Having these common functions embedded in the circuit reduces the area required and gives those functions increased speed compared to building them from logical primitives. Examples of these include multipliers, generic DSP blocks, embedded processors, high speed I/O logic and embedded memories.\n\nHigher-end FPGAs can contain high speed multi-gigabit transceivers and hard IP cores such as processor cores, Ethernet medium access control units, PCI/PCI Express controllers, and external memory controllers.  These cores exist alongside the programmable fabric, but they are built out of transistors instead of LUTs so they have ASIC-level performance and power consumption without consuming a significant amount of fabric resources, leaving more of the fabric free for the application-specific logic.  The multi-gigabit transceivers also contain high performance analog input and output circuitry along with high-speed serializers and deserializers, components which cannot be built out of LUTs.  Higher-level physical layer (PHY) functionality such as line coding may or may not be implemented alongside the serializers and deserializers in hard logic, depending on the FPGA.\n\n\nClocking[edit]\n\nMost of the circuitry built inside of an FPGA is synchronous circuitry that requires a clock signal.  FPGAs contain dedicated global and regional routing networks for clock and reset so they can be delivered with minimal skew.  Also, FPGAs generally contain analog phase-locked loop and/or delay-locked loop components to synthesize new clock frequencies as well as attenuate jitter.  Complex designs can use multiple clocks with different frequency and phase relationships, each forming separate clock domains.  These clock signals can be generated locally by an oscillator or they can be recovered from a high speed serial data stream.  Care must be taken when building clock domain crossing circuitry to avoid metastability.  FPGAs generally contain block RAMs that are capable of working as dual port RAMs with different clocks, aiding in the construction of building FIFOs and dual port buffers that connect differing clock domains.\n\n\n3D architectures[edit]\n\nTo shrink the size and power consumption of FPGAs, vendors such as Tabula and Xilinx have introduced 3D or stacked architectures.[44][45] Following the introduction of its 28\u00a0nm 7-series FPGAs, Xilinx said that several of the highest-density parts in those FPGA product lines will be constructed using multiple dies in one package, employing technology developed for 3D construction and stacked-die assemblies.\n\nXilinx's approach stacks several (three or four) active FPGA dies side-by-side on a silicon interposer\u00a0\u2013 a single piece of silicon that carries passive interconnect.[45][46]  The multi-die construction also allows different parts of the FPGA to be created with different process technologies, as the process requirements are different between the FPGA fabric itself and the very high speed 28 Gbit/s serial transceivers.  An FPGA built in this way is called a heterogeneous FPGA.[47]\n\nAltera's heterogeneous approach involves using a single monolithic FPGA die and connecting other die/technologies to the FPGA using Intel's embedded multi-die interconnect bridge (EMIB) technology.[48]\n\nLabVIEW\n\n\nDesign and programming[edit]\n\nFurther information: Logic synthesis, Verification and validation, and Place and route\n\nTo define the behavior of the FPGA, the user provides a design in a hardware description language (HDL) or as a schematic design.  The HDL form is more suited to work with large structures because it's possible to specify high-level functional behavior rather than drawing every piece by hand. However, schematic entry can allow for easier visualization of a design and its component modules.\n\nUsing an electronic design automation tool, a technology-mapped netlist is generated. The netlist can then be fit to the actual FPGA architecture using a process called place-and-route, usually performed by the FPGA company's proprietary place-and-route software. The user will validate the map, place and route results via timing analysis, simulation, and other verification and validation methodologies. Once the design and validation process is complete, the binary file generated, typically using the FPGA vendor's proprietary software, is used to (re-)configure the FPGA. This file is transferred to the FPGA/CPLD via a serial interface (JTAG) or to an external memory device like an EEPROM.\n\nThe most common HDLs are VHDL and Verilog as well as extensions such as SystemVerilog. However, in an attempt to reduce the complexity of designing in HDLs, which have been compared to the equivalent of assembly languages, there are moves[by whom?] to raise the abstraction level through the introduction of alternative languages.  National Instruments' LabVIEW graphical programming language (sometimes referred to as \"G\") has an FPGA add-in module available to target and program FPGA hardware.\n\nTo simplify the design of complex systems in FPGAs, there exist libraries of predefined complex functions and circuits that have been tested and optimized to speed up the design process. These predefined circuits are commonly called intellectual property (IP) cores, and are available from FPGA vendors and third-party IP suppliers. They are rarely free, and typically released under proprietary licenses.  Other predefined circuits are available from developer communities such as OpenCores (typically released under free and open source licenses such as the GPL, BSD or similar license), and other sources.  Such designs are known as \"open-source hardware.\"\n\nIn a typical design flow, an FPGA application developer will simulate the design at multiple stages throughout the design process. Initially the RTL description in VHDL or Verilog is simulated by creating test benches to simulate the system and observe results. Then, after the synthesis engine has mapped the design to a netlist, the netlist is translated to a gate-level description where simulation is repeated to confirm the synthesis proceeded without errors. Finally the design is laid out in the FPGA at which point propagation delays can be added and the simulation run again with these values back-annotated onto the netlist.\n\nMore recently, OpenCL (Open Computing Language) is being used by programmers to take advantage of the performance and power efficiencies that FPGAs provide.  OpenCL allows programmers to develop code in the C programming language and target FPGA functions as OpenCL kernels using OpenCL constructs.[49] For further information, see high-level synthesis and C to HDL.\n\n\nBasic process technology types[edit]\n\n\tSRAM \u2013 based on static memory technology. In-system programmable and re-programmable. Requires external boot devices. CMOS. Currently in use.[when?]  Notably, flash memory or EEPROM devices may often load contents into internal SRAM that controls routing and logic.\n\tFuse \u2013 One-time programmable. Bipolar. Obsolete.\n\tAntifuse \u2013 One-time programmable. CMOS.\n\tPROM \u2013 Programmable Read-Only Memory technology. One-time programmable because of plastic packaging. Obsolete.\n\tEPROM \u2013 Erasable Programmable Read-Only Memory technology. One-time programmable but with window, can be erased with ultraviolet (UV) light. CMOS. Obsolete.\n\tEEPROM \u2013 Electrically Erasable Programmable Read-Only Memory technology. Can be erased, even in plastic packages. Some but not all EEPROM devices can be in-system programmed. CMOS.\n\tFlash \u2013 Flash-erase EPROM technology. Can be erased, even in plastic packages. Some but not all flash devices can be in-system programmed. Usually, a flash cell is smaller than an equivalent EEPROM cell and is therefore less expensive to manufacture. CMOS.\n\n\nMajor manufacturers[edit]\n\nIn 2016, long-time industry rivals Xilinx and Altera (now an Intel subsidiary) were the FPGA market leaders.[50] At that time, they controlled nearly 90 percent of the market.\n\nBoth Xilinx and Altera[note 3] provide proprietary electronic design automation software for Windows and Linux (ISE/Vivado and Quartus) which enables engineers to design, analyze, simulate, and synthesize (compile) their designs.[51][52]\n\nOther manufacturers include:\n\n\n\tMicrochip:\n\tMicrosemi (previously Actel), producing antifuse, flash-based, mixed-signal FPGAs; acquired by Microchip in 2018\n\tAtmel, a second source of some Altera-compatible devices; also FPSLIC[clarification needed] mentioned above;[53] acquired by Microchip in 2016\n\n\n\tLattice Semiconductor, which manufactures low-power SRAM-based FPGAs featuring integrated configuration flash, instant-on and live reconfiguration\n\tSiliconBlue Technologies, which provides extremely low power SRAM-based FPGAs with optional integrated nonvolatile configuration memory; acquired by Lattice in 2011\n\n\n\tQuickLogic,[54] which manufactures Ultra Low Power Sensor Hubs, extremely low powered, low density SRAM-based FPGAs, with display bridges MIPI & RGB inputs, MIPI, RGB and LVDS outputs\n\tAchronix, manufacturing SRAM based FPGAS with 1.5\u00a0GHz fabric speed[55]\n\n\nIn March 2010, Tabula announced their FPGA technology that uses time-multiplexed logic and interconnect that claims potential cost savings for high-density applications.[56] On March 24, 2015, Tabula officially shut down.[57]\n\nOn June 1, 2015, Intel announced it would acquire Altera for approximately $16.7 billion and completed the acquisition on December 30, 2015.[58]\n\n\nSee also[edit]\n\n\n\tElectronics portal\n\n\n\n\tFPGA prototyping\n\tList of HDL simulators\n\tList of Xilinx FPGAs\n\tVerilog and SystemVerilog hardware description languages\n\tVHDL, Very High Speed Integrated Circuit hardware description language\n\tHardware acceleration for an overview of computing based primarily in hardware\n\n\nNotes[edit]\n\n\n\t^ Called configurable logic block (CLB) or logic array block (LAB), depending on vendor\n\n\t^ a b For more information, see routing in electronic design automation, as part of the place and route step of integrated circuit manufacturing.\n\n\t^ now Intel\n\n\n\n\n\nReferences[edit]\n\n\n\t^ Schuettel, Patrick; Groeneweg, Nikolaj; Baldegger, Rico (2019). The Crypto Encyclopedia: Coins, Tokens and Digital Assets from A to Z. Bern: Growth Publisher.\n\n\t^ a b c \"FPGA Architecture for the Challenge\". toronto.edu. University of Toronto.\n\n\n\t^ a b c \"A Survey of FPGA-based Accelerators for Convolutional Neural Networks\", S. Mittal, NCAA, 2018\n\n\t^ Wisniewski, Remigiusz (2009). Synthesis of compositional microprogram control units for programmable devices. Zielona G\u00f3ra: University of Zielona G\u00f3ra. p.\u00a0153. ISBN\u00a0978-83-7481-293-1.\n\n\n\t^ \"FPGA Signal Integrity tutorial\". altium.com.\n\n\n\t^ NASA: FPGA drive strength Archived 2010-12-05 at the Wayback Machine\n\n\t^ Mike Thompson. \"Mixed-signal FPGAs provide GREEN POWER\".\nEE Times, 2007-07-02.\n\n\t^ a b c \"History of FPGAs\". Archived from the original on April 12, 2007. Retrieved 2013-07-11.\n\n\n\t^ \"In the Beginning\". altera.com. 21 April 2015.\n\n\n\t^ a b \"XCELL issue 32\" (PDF). Xilinx.\n\n\n\t^ a b c d e f Funding Universe. \u201cXilinx, Inc.\u201d Retrieved January 15, 2009.\n\n\t^ Clive Maxfield, Programmable Logic DesignLine, \"Xilinx unveil revolutionary 65nm FPGA architecture: the Virtex-5 family. May 15, 2006. Retrieved February 5, 2009.\n\n\t^ Press Release, \"Xilinx Co-Founder Ross Freeman Honored as 2009 National Inventors Hall of Fame Inductee for Invention of FPGA Archived 2016-10-06 at the Wayback Machine\"\n\n\t^ US 4870302, Freeman, Ross H., \"Configurable electrical circuit having configurable logic elements and configurable interconnects\", published 19 February 1988, issued 26 September 1989\u00a0\n\n\t^ \"Top FPGA Companies For 2013\". sourcetech411.com. 2013-04-28.\n\n\n\t^ a b Maxfield, Clive (2004). The Design Warrior's Guide to FPGAs: Devices, Tools and Flows. Elsevier. p.\u00a04. ISBN\u00a0978-0-7506-7604-5.\n\n\n\t^ \"Microsoft Supercharges Bing Search With Programmable Chips\". WIRED. 16 June 2014.\n\n\n\t^ a b \"Project Catapult\". Microsoft Research. July 2018.\n\n\n\t^ \"Xilinx Inc, Form 8-K, Current Report, Filing Date Oct 19, 2011\". secdatabase.com. Retrieved May 6, 2018.\n\n\n\t^ \"Xilinx Inc, Form 10-K, Annual Report, Filing Date May 31, 2011\". secdatabase.com. Retrieved May 6, 2018.\n\n\n\t^ Maxfield, Max. \"Xilinx UltraScale FPGA Offers 50 Million Equivalent ASIC Gates\". www.eetimes.com. EE Times.\n\n\n\t^ a b Dylan McGrath, EE Times, \"FPGA Market to Pass $2.7 Billion by '10, In-Stat Says\". May 24, 2006. Retrieved February 5, 2009.\n\n\t^ a b \"Global FPGA Market Analysis And Segment Forecasts To 2020 \u2013 FPGA Industry, Outlook, Size, Application, Product, Share, Growth Prospects, Key Opportunities, Dynamics, Trends, Analysis, FPGA Report \u2013 Grand View Research Inc\". grandviewresearch.com.\n\n\n\t^ Dylan McGrath, EE Times, \"Gartner Dataquest Analyst Gives ASIC, FPGA Markets Clean Bill of Health\". June 13, 2005. Retrieved February 5, 2009.\n\n\t^ \"Virtex-4 Family Overview\" (PDF). xilinx.com. Retrieved 14 April 2018.\n\n\n\t^ \"ASIC, ASSP, SoC, FPGA \u2013 What's the Difference?\". eetimes.com.\n\n\n\t^ Kuon, Ian; Rose, Jonathan (2006). \"Measuring the gap between FPGAs and ASICs\". Proceedings of the international symposium on Field programmable gate arrays \u2013 FPGA'06 (PDF). New York, NY: ACM. pp.\u00a021\u201330. doi:10.1145/1117201.1117205. ISBN\u00a01-59593-292-5.\n\n\n\t^ a b Tim Erjavec, White Paper, \"Introducing the Xilinx Targeted Design Platform: Fulfilling the Programmable Imperative Archived 2009-02-06 at the Wayback Machine.\" February 2, 2009. Retrieved February 2, 2009\n\n\t^ \"AN 818: Static Update Partial Reconfiguration Tutorial: for Intel Stratix 10 GX FPGA Development Board\". www.intel.com. Retrieved 2018-12-01.\n\n\n\t^ \"Can FPGAs dynamically modify their logic?\". Electrical Engineering Stack Exchange. Retrieved 2018-12-01.\n\n\n\t^ \"CPLD vs FPGA: Differences between them and which one to use? \u2013 Numato Lab Help Center\". numato.com.\n\n\n\t^ Huffmire Paper \"Managing Security in FPGA-Based Embedded Systems.\" Nov\u2013Dec 2008. Retrieved Sept 22, 2009\n\n\t^ \"EETimes on PUF: Security features for non-security experts \u2013 Intrinsic ID\". Intrinsic ID. 2015-06-09.\n\n\n\t^ Skorobogatov, Sergei; Woods, Christopher (2012). Breakthrough Silicon Scanning Discovers Backdoor in Military Chip. Digital Object Identifier: 10.1007/978-3-642-33027-8_2. Lecture Notes in Computer Science. 7428. pp.\u00a023\u201340. doi:10.1007/978-3-642-33027-8_2. ISBN\u00a0978-3-642-33026-1.\n\n\n\t^ \"Xilinx Inc, Form 8-K, Current Report, Filing Date Apr 26, 2006\". secdatabase.com. Retrieved May 6, 2018.\n\n\n\t^ \"Publications and Presentations\". bdti.com. Archived from the original on 2010-08-21. Retrieved 2018-11-02.\n\n\n\t^ LaPedus, Mark. \"Xilinx aims 65-nm FPGAs at DSP applications\". EETimes.\n\n\n\t^ Morgan, Timothy Pricket (2014-09-03). \"How Microsoft Is Using FPGAs To Speed Up Bing Search\". Enterprise Tech. Retrieved 2018-09-18.\n\n\n\t^ \"FPGA development devices for radiation-hardened space applications introduced by Microsemi\". www.militaryaerospace.com. Retrieved 2018-11-02.\n\n\n\t^ a b \"CrypTech: Building Transparency into Cryptography t\" (PDF).\n\n\n\t^ 2. CycloneII Architecture. Altera. February 2007\n\n\t^ \"Documentation: Stratix IV Devices\" (PDF). Altera.com. 2008-06-11. Retrieved 2013-05-01.\n\n\n\t^ Virtex-4 FPGA User Guide (December 1st, 2008). Xilinx, Inc.\n\n\t^ Dean Takahashi, VentureBeat. \"Intel connection helped chip startup Tabula raise $108M.\" May 2, 2011. Retrieved May 13, 2011.\n\n\t^ a b Lawrence Latif, The Inquirer. \"FPGA manufacturer claims to beat Moore's Law.\" October 27, 2010. Retrieved May 12, 2011.\n\n\t^ EDN Europe. \"Xilinx adopts stacked-die 3D packaging.\" November 1, 2010. Retrieved May 12, 2011.\n\n\t^ Saban, Kirk (December 11, 2012). \"Xilinx Stacked Silicon Interconnect Technology Delivers Breakthrough FPGA Capacity, Bandwidth, and Power Efficiency\" (PDF). xilinx.com. Retrieved 2018-11-30.\n\n\n\t^ \"Intel Custom Foundry EMIB\". Intel.\n\n\n\t^ \"Why use OpenCL on FPGAs?\". StreamComputing. 2014-09-16.\n\n\n\t^ Dillien, Paul (March 6, 2017). \"And the Winner of Best FPGA of 2016 is...\" EETimes. Retrieved September 7, 2017.\n\n\n\t^ \"Xilinx ISE Design Suite\". www.xilinx.com. Retrieved 2018-12-01.\n\n\n\t^ \"FPGA Design Software - Intel\u00ae Quartus\u00ae Prime\". Intel. Retrieved 2018-12-01.\n\n\n\t^ \"Top FPGA Companies For 2013\". SourceTech411. 2013-04-28. Retrieved 2018-12-01.\n\n\n\t^ \"QuickLogic  \u2014 Customizable Semiconductor Solutions for Mobile Devices\". www.quicklogic.com. QuickLogic Corporation. Retrieved 2018-10-07.\n\n\n\t^ \"Achronix to Use Intel's 22nm Manufacturing\". Intel Newsroom. 2010-11-01. Retrieved 2018-12-01.\n\n\n\t^ \"Tabula's Time Machine\u00a0\u2014 Micro Processor Report\" (PDF). Archived from the original (PDF) on 2011-04-10.\n\n\n\t^ Tabula to shut down; 120 jobs lost at fabless chip company Silicon Valley Business Journal\n\n\t^ \"Intel to buy Altera for $16.7 billion in its biggest deal ever\". Reuters. June 2015.\n\n\n\n\n\nFurther reading[edit]\n\n\tSadrozinski, Hartmut F.-W.; Wu, Jinyuan (2010). Applications of Field-Programmable Gate Arrays in Scientific Research. Taylor & Francis. ISBN\u00a0978-1-4398-4133-4.\n\n\tWirth, Niklaus (1995). Digital Circuit Design An Introduction Textbook. Springer. ISBN\u00a0978-3-540-58577-0.\n\n\tMitra, Jubin (2018). \"An FPGA-Based Phase Measurement System\". IEEE.\n\n\n\nExternal links[edit]\n\n\tWhat is an FPGA? on YouTube\n\n\n\t\tv\n\tt\n\te\n\n\nElectronic components\n\n\tSemiconductor\ndevices\t\n\tMOS transistors\t\n\tBiCMOS\n\tComplementary MOS (CMOS)\n\tDepletion-load NMOS\n\tFin field-effect transistor (FinFET)\n\tFloating-gate MOSFET (FGMOS)\n\tInsulated-gate bipolar transistor (IGBT)\n\tLateral diffused MOS (LDMOS)\n\tMOS field-effect transistor (MOSFET)\n\tMulti-gate field-effect transistor (MuGFET)\n\tNMOS\n\tPMOS\n\tPower MOSFET\n\tThin-film transistor (TFT)\n\tVMOS\n\n\n\n\n\tOther transistors\t\n\tBipolar junction transistor (BJT)\n\tDarlington transistor\n\tDiffusion transistor\n\tField-effect transistor (FET)\n\tJFET\n\tLight-emitting transistor (LET)\n\tOrganic field-effect transistor (OFET)\n\tOrganic light-emitting transistor (OLET)\n\tPentode transistor\n\tPoint-contact transistor\n\tProgrammable unijunction transistor (PUT)\n\tStatic induction transistor (SIT)\n\tTetrode transistor\n\tUnijunction transistor (UJT)\n\n\n\n\n\tDiodes\t\n\tAvalanche diode\n\tConstant-current diode (CLD, CRD)\n\tLaser diode (LD)\n\tLight-emitting diode (LED)\n\tOrganic light-emitting diode (OLED)\n\tPhotodiode\n\tPIN diode\n\tSchottky diode\n\tStep recovery diode\n\tZener diode\n\n\n\n\n\tOther devices\t\n\tDIAC\n\tHeterostructure barrier varactor\n\tIntegrated circuit (IC)\n\tMemistor\n\tMemory cell\n\tMemristor\n\tOrganic semiconductor\n\tPhotodetector\n\tSolaristor\n\tQuantum circuit\n\tSilicon controlled rectifier (SCR)\n\tStatic induction thyristor (SITh)\n\tThree-dimensional integrated circuit (3D IC)\n\tThyristor\n\tTRIAC\n\tVaricap\n\n\n\n\n\n\n\n\tVoltage regulators\t\n\tLinear regulator\n\tLow-dropout regulator\n\tSwitching regulator\n\tBuck\n\tBoost\n\tBuck\u2013boost\n\tSplit-pi\n\t\u0106uk\n\tSEPIC\n\tCharge pump\n\tSwitched capacitor\n\n\n\n\n\tVacuum tubes\t\n\tAcorn tube\n\tAudion\n\tBeam tetrode\n\tBarretter\n\tCompactron\n\tDiode\n\tFleming valve\n\tNonode\n\tNuvistor\n\tPentagrid (Hexode, Heptode, Octode)\n\tPentode\n\tPhotomultiplier\n\tPhototube\n\tTetrode\n\tTriode\n\n\n\n\n\tVacuum tubes (RF)\t\n\tBackward-wave oscillator (BWO)\n\tCavity magnetron\n\tCrossed-field amplifier (CFA)\n\tGyrotron\n\tInductive output tube (IOT)\n\tKlystron\n\tMaser\n\tSutton tube\n\tTraveling-wave tube (TWT)\n\n\n\n\n\tCathode ray tubes\t\n\tBeam deflection tube\n\tCharactron\n\tIconoscope\n\tMagic eye tube\n\tMonoscope\n\tSelectron tube\n\tStorage tube\n\tTrochotron\n\tVideo camera tube\n\tWilliams tube\n\n\n\n\n\tGas-filled tubes\t\n\tCold cathode\n\tCrossatron\n\tDekatron\n\tIgnitron\n\tKrytron\n\tMercury-arc valve\n\tNeon lamp\n\tNixie tube\n\tThyratron\n\tTrigatron\n\tVoltage-regulator tube\n\n\n\n\n\tAdjustable\t\n\tPotentiometer\n\tdigital\n\n\n\tVariable capacitor\n\tVaricap\n\n\n\n\n\tPassive\t\n\tConnector\n\taudio and video\n\telectrical power\n\tRF\n\n\n\tElectrolytic detector\n\tFerrite\n\tFuse\n\tresettable\n\n\n\tResistor\n\tSwitch\n\tThermistor\n\tTransformer\n\tVaristor\n\tWire\n\tWollaston wire\n\n\n\n\n\n\n\tReactive\t\n\tCapacitor\n\ttypes\n\n\n\tCeramic resonator\n\tCrystal oscillator\n\tInductor\n\tParametron\n\tRelay\n\treed relay\n\tmercury switch\n\n\n\n\n\n\n\n\n\n\t\tv\n\tt\n\te\n\n\nSemiconductor packages\n\n\tDiode\t\n\tDO-204 (DO-7 / DO-35 / DO-41)\n\tDO-213 (MELF)\n\tDO-214 (SMA / SMB / SMC)\n\tSOD (SOD-123 / SOD-323 / SOD-523 / SOD-923)\n\n\n\n\n\tTransistor\t\n\tSOT / TSOT\n\tTO-3 (TH / Panel)\n\tTO-5 (TH)\n\tTO-18 (TH)\n\tTO-39 (TH)\n\tTO-66 (TH / Panel)\n\tTO-92 (TH)\n\tTO-126 (TH / Panel)\n\tTO-202 (TH / Panel)\n\tTO-220 (TH / Panel)\n\tTO-247 (TH / Panel)\n\tTO-251 (IPAK) (SMT)\n\tTO-252 (DPAK) (SMT)\n\tTO-262 (I2PAK) (SMT)\n\tTO-263 (D2PAK) (SMT)\n\tTO-273 (Super-220) (SMT)\n\tTO-274 (Super-247) (SMT)\n\n\n\n\n\tSingle row\t\n\tSIP / SIL\n\n\n\n\n\tDual row\t\n\tDFN\n\tDIP / DIL\n\tFlat Pack\n\tSO / SOIC\n\tSOP / SSOP\n\tTSOP / TSSOP\n\tZIP\n\n\n\n\n\tQuad row\t\n\tLCC\n\tPLCC\n\tQFN\n\tQFP\n\tQUIP / QUIL\n\n\n\n\n\tGrid array\t\n\tBGA\n\teWLB\n\tLGA\n\tPGA\n\n\n\n\n\tWafer\t\n\tCOB\n\tCOF\n\tCOG\n\tCSP\n\tFlip Chip\n\tPoP\n\tQP\n\tUICC\n\tWL-CSP / WLP\n\n\n\n\n\tRelated topics\t\n\tElectronic packaging\n\tIntegrated circuit packaging\n\tList of integrated circuit packaging types\n\tPrinted circuit board\n\tSurface-mount technology\n\tThrough-hole technology\n\n\n\n\n\tNote: It's relatively common to find packages that contain other components than their designated ones, such as diodes or voltage regulators in transistor packages, etc.\n\n\n\n\n\t\tv\n\tt\n\te\n\n\nDigital electronics\n\n\tComponents\t\n\tCombinational logic\n\tSequential logic\n\tIntegrated circuit (IC)\n\tLogic gate\n\n\n\n\n\tTheory\t\n\tDigital signal\n\tBoolean algebra\n\tLogic synthesis\n\tLogic in computer science\n\tComputer architecture\n\tDigital signal\n\tDigital signal processing\n\n\n\tCircuit minimization\n\tSwitching circuit theory\n\n\n\n\n\tDesign\t\n\tLogic synthesis\n\tPlace and route\n\tPlacement\n\tRouting\n\n\n\tRegister-transfer level\n\tHardware description language\n\tHigh-level synthesis\n\n\n\tFormal equivalence checking\n\tSynchronous logic\n\tAsynchronous logic\n\tFinite-state machine\n\tHierarchical state machine\n\n\n\n\n\n\n\tApplications\t\n\tComputer hardware\n\tHardware acceleration\n\n\n\tDigital audio\n\tradio\n\n\n\tDigital photography\n\tDigital telephone\n\tDigital video\n\tcinema\n\ttelevision\n\n\n\tElectronic literature\n\n\n\n\n\tDesign issues\t\n\tMetastability\n\tRunt pulse\n\n\n\n\n\n\n\n\t\tv\n\tt\n\te\n\n\nProgrammable logic\n\n\tConcepts\t\n\tASIC\n\tSoC\n\tFPGA\n\tLogic block\n\n\n\tCPLD\n\tEPLD\n\tPLA\n\tPAL\n\tGAL\n\tPSoC\n\tReconfigurable computing\n\tXputer\n\n\n\tSoft microprocessor\n\tCircuit underutilization\n\tHigh-level synthesis\n\tHardware acceleration\n\n\n\n\n\tLanguages\t\n\tVerilog\n\tA\n\tAMS\n\n\n\tVHDL\n\tAMS\n\tVITAL\n\n\n\tSystemVerilog\n\tDPI\n\n\n\tSystemC\n\tAHDL\n\tHandel-C\n\tPSL\n\tUPF\n\tPALASM\n\tABEL\n\tCUPL\n\tOpenVera\n\tC to HDL\n\tFlow to HDL\n\tMyHDL\n\tJHDL\n\tELLA\n\n\n\n\n\tCompanies\t\n\tAccellera\n\tActel\n\tAchronix\n\tAMD\n\tAldec\n\tAtmel\n\tCadence\n\tCypress\n\tDuolog\n\tForte\n\tIntel\n\tAltera\n\n\n\tLattice\n\tNational\n\tMentor Graphics\n\tMicrosemi\n\tSignetics\n\tSynopsys\n\tMagma\n\tVirage Logic\n\n\n\tTexas Instruments\n\tTabula\n\tXilinx\n\n\n\n\n\tProducts\t\n\tHardware\t\n\tiCE\n\tStratix\n\tVirtex\n\n\n\n\n\tSoftware\t\n\tIntel Quartus Prime\n\tXilinx ISE\n\tXilinx Vivado\n\tModelSim\n\tVTR\n\tSimulators\n\n\n\n\n\tIP\t\n\tProprietary\t\n\tARC\n\tARM Cortex-M\n\tLEON\n\tLatticeMico8\n\tMicroBlaze\n\tPicoBlaze\n\tNios\n\tNios II\n\n\n\n\n\tOpen-source\t\n\tJOP\n\tLatticeMico32\n\tOpenCores\n\tOpenRISC\n\t1200\n\n\n\tRISC-V\n\tZet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tv\n\tt\n\te\n\n\nHardware acceleration\n\n\tTheory\t\n\tUniversal Turing machine\n\tParallel computing\n\tDistributed computing\n\n\n\n\n\tApplications\t\n\tGPU\n\tGPGPU\n\tDirectX\n\n\n\tAudio\n\tDigital signal processing\n\tHardware random number generation\n\tArtificial intelligence\n\tCryptography\n\tTLS\n\n\n\tMachine vision\n\tCustom hardware attack\n\tscrypt\n\n\n\tNetworking\n\n\n\n\n\tImplementations\t\n\tHigh-level synthesis\n\tC to HDL\n\n\n\tFPGA\n\tASIC\n\tCPLD\n\tSystem on Chip\n\tNetwork on Chip\n\n\n\n\n\n\n\tArchitectures\t\n\tData flow\n\tTransport triggered\n\tMulticore\n\tManycore\n\tHeterogeneous\n\tIn-memory computing\n\tSystolic array\n\tNeuromorphic\n\n\n\n\n\tRelated\t\n\tProgrammable logic\n\tProcessor\n\tdesign\n\tchronology\n\n\n\tDigital electronics\n\tVirtualization\n\tHardware emulation\n\n\n\tLogic synthesis\n\tEmbedded systems\n\n\n\n\n\n\n\n\tAuthority control \t\n\tGND: 4347749-5\n\tLCCN: sh93009062\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\tRetrieved from \"https://en.wikipedia.org/w/index.php?title=Field-programmable_gate_array&oldid=919207493\"\n\n\t\t\n\t\tCategories: \tGate arrays\n\tIntegrated circuits\n\tSemiconductor devices\n\tField-programmable gate arrays\n\tOpenCL compute devices\n\tAmerican inventions\n\tHardware acceleration\n\n\nHidden categories: \tWebarchive template wayback links\n\tUse American English from April 2019\n\tAll Wikipedia articles written in American English\n\tArticles needing additional references from June 2017\n\tAll articles needing additional references\n\tAll articles with unsourced statements\n\tArticles with unsourced statements from October 2018\n\tAll articles with vague or ambiguous time\n\tVague or ambiguous time from January 2017\n\tArticles with unsourced statements from May 2015\n\tWikipedia articles in need of updating from December 2018\n\tAll Wikipedia articles in need of updating\n\tArticles with unsourced statements from December 2018\n\tWikipedia articles needing clarification from December 2018\n\tWikipedia articles needing clarification from January 2013\n\tArticles containing potentially dated statements from 2018\n\tAll articles containing potentially dated statements\n\tVague or ambiguous time from October 2018\n\tArticles containing potentially dated statements from 2017\n\tDynamic lists\n\tVague or ambiguous time from June 2016\n\tArticles with specifically marked weasel-worded phrases from July 2015\n\tVague or ambiguous time from April 2014\n\tWikipedia articles with GND identifiers\n\tWikipedia articles with LCCN identifiers\n\n\n\n\n\t\t\n\n\t\t\n\t\n\n\n\n\n\t\n\n\n\n\n\n\t\t\n\t\t\tNavigation menu\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tPersonal tools\n\n\t\t\t\t\t\t\tNot logged in\n\tTalk\n\tContributions\n\tCreate account\n\tLog in\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tNamespaces\n\n\t\t\t\t\t\t\tArticle\n\tTalk\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tVariants\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tViews\n\n\t\t\t\t\t\t\tRead\n\tEdit\n\tView history\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tMore\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\n\n\t\t\t\n\n\t\t\t\n\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\tNavigation\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tMain page\n\tContents\n\tFeatured content\n\tCurrent events\n\tRandom article\n\tDonate to Wikipedia\n\tWikipedia store\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tInteraction\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tHelp\n\tAbout Wikipedia\n\tCommunity portal\n\tRecent changes\n\tContact page\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tTools\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tWhat links here\n\tRelated changes\n\tUpload file\n\tSpecial pages\n\tPermanent link\n\tPage information\n\tWikidata item\n\tCite this page\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tIn other projects\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tWikimedia Commons\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tPrint/export\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tCreate a book\n\tDownload as PDF\n\tPrintable version\n\n\n\t\t\t\t\t\t\t\n\n\t\t\n\n\t\t\t\n\t\t\tLanguages\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\u0627\u0644\u0639\u0631\u0628\u064a\u0629\n\t\u09ac\u09be\u0982\u09b2\u09be\n\t\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\n\tBoarisch\n\tCatal\u00e0\n\t\u010ce\u0161tina\n\tDansk\n\tDeutsch\n\tEesti\n\t\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\n\tEspa\u00f1ol\n\tEsperanto\n\tEuskara\n\t\u0641\u0627\u0631\u0633\u06cc\n\tFran\u00e7ais\n\tGalego\n\t\ud55c\uad6d\uc5b4\n\t\u0939\u093f\u0928\u094d\u0926\u0940\n\tBahasa Indonesia\n\tItaliano\n\t\u05e2\u05d1\u05e8\u05d9\u05ea\n\tMagyar\n\t\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\n\tNederlands\n\t\u65e5\u672c\u8a9e\n\tNorsk\n\tNorsk nynorsk\n\tPolski\n\tPortugu\u00eas\n\tRom\u00e2n\u0103\n\t\u0420\u0443\u0441\u0441\u043a\u0438\u0439\n\tSimple English\n\tSloven\u010dina\n\t\u0421\u0440\u043f\u0441\u043a\u0438 / srpski\n\tSuomi\n\tSvenska\n\tTagalog\n\t\u0e44\u0e17\u0e22\n\tT\u00fcrk\u00e7e\n\t\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n\tTi\u1ebfng Vi\u1ec7t\n\t\u4e2d\u6587\n\n\n\t\t\t\tEdit links\n\t\t\t\n\n\t\t\n\n\t\t\t\t\n\n\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t\t This page was last edited on 2 October 2019, at 12:11\u00a0(UTC).\n\tText is available under the Creative Commons Attribution-ShareAlike License;\nadditional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n\n\t\t\t\t\t\t\tPrivacy policy\n\tAbout Wikipedia\n\tDisclaimers\n\tContact Wikipedia\n\tDevelopers\n\tCookie statement\n\tMobile view\n\n\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\n\n\t\t\n\n\t\t\n\n\n\n\n", "metadata": {"Content-Encoding": "UTF-8", "Content-Language": "en", "Content-Type": "text/html; charset=UTF-8", "ResourceLoaderDynamicStyles": "", "X-Parsed-By": ["org.apache.tika.parser.DefaultParser", "org.apache.tika.parser.html.HtmlParser"], "X-TIKA:parse_time_millis": "11", "dc:title": "Field-programmable gate array - Wikipedia", "generator": "MediaWiki 1.34.0-wmf.24", "og:image": "https://upload.wikimedia.org/wikipedia/commons/f/fa/Altera_StratixIVGX_FPGA.jpg", "referrer": ["origin", "origin-when-crossorigin", "origin-when-cross-origin"], "resourceName": "https-en-wikipedia-org-wiki-fpga", "title": "Field-programmable gate array - Wikipedia"}}